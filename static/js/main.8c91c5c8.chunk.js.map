{"version":3,"sources":["components/todo-header.js","components/todo-footer.js","components/todo-item.js","components/todo-list.js","App.js","serviceWorker.js","index.js"],"names":["TodoHeader","state","content","done","handleChange","e","setState","target","value","handleSubmit","preventDefault","props","addTodo","countToggle","this","todo","filter","length","countTodo","className","onSubmit","type","onChange","toggleAll","checked","placeholder","React","Component","TodoFooter","todos","updateStatus","clearCompleted","unfinishedItemsCount","itemText","haveCompletedItem","href","onClick","TodoItem","editting","showInput","showedit","key","id","toggleTodo","onDoubleClick","onBlur","editTodo","deleteTodo","TodoList","map","App","status","counttoggle","newtodos","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8c91c5c8.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./todo-header.scss\";\r\n\r\nclass TodoHeader extends React.Component {\r\n  state = {\r\n    content: \"\",\r\n    done: false,\r\n  };\r\n\r\n  handleChange = (e) => {\r\n    this.setState({\r\n      content: e.target.value,\r\n    });\r\n  };\r\n\r\n  handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    this.props.addTodo(this.state);\r\n    this.setState({\r\n      content: \"\",\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const countToggle = this.props.todo.filter((todo) => todo.done).length;\r\n    const countTodo = this.props.todo.length;\r\n\r\n    return (\r\n      <div className=\"header\">\r\n        <form onSubmit={this.handleSubmit}>\r\n          {countTodo > 0 ? (\r\n            countToggle === countTodo ? (\r\n              <input\r\n                className=\"toggle-all\"\r\n                type=\"checkbox\"\r\n                onChange={this.props.toggleAll}\r\n                checked={countToggle === countTodo}\r\n              />\r\n            ) : (\r\n              <input\r\n                className=\"toggle-all\"\r\n                type=\"checkbox\"\r\n                onChange={this.props.toggleAll}\r\n              />\r\n            )\r\n          ) : null}\r\n          <input\r\n            className=\"new-todo-input\"\r\n            type=\"text\"\r\n            placeholder=\"What needs to be done?\"\r\n            value={this.state.content}\r\n            onChange={this.handleChange}\r\n          />\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TodoHeader;\r\n","import React from \"react\";\r\nimport \"./todo-footer.scss\";\r\n\r\nconst TodoFooter = (props) => {\r\n  const {\r\n    todos,\r\n    updateStatus,\r\n    clearCompleted,\r\n    // footerActive,\r\n    // footerAll,\r\n    // footerCompleted,\r\n  } = props;\r\n  const unfinishedItemsCount = todos.filter((todo) => !todo.done).length;\r\n  const itemText = unfinishedItemsCount > 1 ? \"items\" : \"item\";\r\n  const haveCompletedItem = todos.length - unfinishedItemsCount > 0;\r\n\r\n  return (\r\n    <div>\r\n      {todos.length > 0 ? (\r\n        <div className=\"footer\">\r\n          <span className=\"todo-count\">{`${unfinishedItemsCount} ${itemText} left`}</span>\r\n          <ul className=\"filters\">\r\n            <li>\r\n              <a\r\n                href=\"#/All\"\r\n                onClick={() => {\r\n                  updateStatus(\"ALL\");\r\n                }}\r\n              >\r\n                All\r\n              </a>\r\n            </li>\r\n            <li>\r\n              <a\r\n                href=\"#/Active\"\r\n                onClick={() => {\r\n                  updateStatus(\"ACTIVE\");\r\n                }}\r\n              >\r\n                Active\r\n              </a>\r\n            </li>\r\n            <li>\r\n              <a\r\n                href=\"#/completed\"\r\n                onClick={() => {\r\n                  updateStatus(\"COMPLETED\");\r\n                }}\r\n              >\r\n                Completed\r\n              </a>\r\n            </li>\r\n          </ul>\r\n          <button\r\n            className=\"clear-completed\"\r\n            onClick={() => {\r\n              clearCompleted();\r\n            }}\r\n          >\r\n            {haveCompletedItem ? \"clear completed\" : \"\"}\r\n          </button>\r\n        </div>\r\n      ) : null}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TodoFooter;\r\n","import React from \"react\";\r\nimport \"./todo-item.scss\";\r\n\r\nclass TodoItem extends React.Component {\r\n  state = {\r\n    editting: false,\r\n  };\r\n\r\n  showInput = () => {\r\n    const showedit = !this.state.editting;\r\n    this.setState({\r\n      editting: showedit,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"todo-item\" key={this.props.todo.id}>\r\n        <input\r\n          className=\"toggle-todo-input\"\r\n          type=\"checkbox\"\r\n          onChange={() => {\r\n            this.props.toggleTodo(this.props.todo.id);\r\n          }}\r\n          checked={this.props.todo.done}\r\n        />\r\n        {this.props.todo.done ? (\r\n          <label\r\n            className=\"todo-content ischecked\"\r\n            onDoubleClick={this.showInput}\r\n          >\r\n            {this.state.editting ? (\r\n              <input\r\n                className=\"edit-todo\"\r\n                type=\"edit\"\r\n                value={this.props.todo.content}\r\n                key={this.props.todo.id}\r\n                onBlur={this.showInput}\r\n                onChange={(e) => {\r\n                  this.props.editTodo(e.target.value, this.props.todo.id);\r\n                }}\r\n              />\r\n            ) : (\r\n              this.props.todo.content\r\n            )}\r\n          </label>\r\n        ) : (\r\n          <label className=\"todo-content\" onDoubleClick={this.showInput}>\r\n            {this.state.editting ? (\r\n              <input\r\n                className=\"edit-todo\"\r\n                type=\"edit\"\r\n                value={this.props.todo.content}\r\n                key={this.props.todo.id}\r\n                onBlur={this.showInput}\r\n                onChange={(e) => {\r\n                  this.props.editTodo(e.target.value, this.props.todo.id);\r\n                }}\r\n              />\r\n            ) : (\r\n              this.props.todo.content\r\n            )}\r\n          </label>\r\n        )}\r\n\r\n        {this.state.editting === false ? (\r\n          <button\r\n            className=\"delete-btn\"\r\n            onClick={() => {\r\n              this.props.deleteTodo(this.props.todo.id);\r\n            }}\r\n          />\r\n        ) : null}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TodoItem;\r\n","import React from \"react\";\r\nimport TodoItem from \"./todo-item.js\";\r\n\r\nconst TodoList = (props) => {\r\n  const { todos, deleteTodo, toggleTodo, editTodo } = props;\r\n  return (\r\n    <div>\r\n      {todos.map((todo) => {\r\n        return (\r\n          <TodoItem\r\n            key={todo.id}\r\n            todo={todo}\r\n            deleteTodo={deleteTodo}\r\n            toggleTodo={toggleTodo}\r\n            editTodo={editTodo}\r\n            //{...props}\r\n          />\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TodoList;\r\n","import React from \"react\";\r\nimport \"./scss/reset.scss\";\r\nimport \"./App.scss\";\r\n\r\nimport TodoHeader from \"./components/todo-header.js\";\r\nimport TodoFooter from \"./components/todo-footer.js\";\r\nimport TodoList from \"./components/todo-list\";\r\n\r\nclass App extends React.Component {\r\n  state = {\r\n    todos: [],\r\n    status: \"ALL\",\r\n  };\r\n\r\n  addTodo = (todo) => {\r\n    this.setState({\r\n      todos: [\r\n        ...this.state.todos,\r\n        { ...todo, id: this.state.todos.length + 1 },\r\n      ],\r\n    });\r\n  };\r\n\r\n  toggleAll = () => {\r\n    const { todos } = this.state;\r\n    const counttoggle = todos.filter((todo) => todo.done).length;\r\n    // if (counttoggle === todos.length) {\r\n    //   this.setState({\r\n    //     todos: todos.map((todo) => ({\r\n    //       ...todo,\r\n    //       done: false,\r\n    //     })),\r\n    //   });\r\n    // } else {\r\n    //   this.setState({\r\n    //     todos: todos.map((todo) => ({\r\n    //       ...todo,\r\n    //       done: true,\r\n    //     })),\r\n    //   });\r\n    // }\r\n    this.setState({\r\n      todos: todos.map((todo) => ({\r\n        ...todo,\r\n        done: counttoggle !== todos.length,\r\n      })),\r\n    });\r\n  };\r\n\r\n  toggleTodo = (id) => {\r\n    //const todos = this.state.todos.map((todo) => {\r\n    //   if (todo.id === id) {\r\n    //     return {\r\n    //       ...todo,\r\n    //       done: !todo.done ,\r\n    //     };\r\n    //   }\r\n    //   return todo;\r\n    // });\r\n    this.setState({\r\n      todos: this.state.todos.map((todo) => ({\r\n        ...todo,\r\n        done: todo.id === id ? !todo.done : todo.done,\r\n      })),\r\n    });\r\n  };\r\n\r\n  editTodo = (content, id) => {\r\n    // const todos = this.state.todos.map((todo) => {\r\n    //   if (todo.id === id) {\r\n    //     return {\r\n    //       ...todo,\r\n    //       content: content,\r\n    //     };\r\n    //   }\r\n    //   return todo;\r\n    // });\r\n    this.setState({\r\n      todos: this.state.todos.map((todo) => ({\r\n        ...todo,\r\n        content: todo.id === id ? content : todo.content,\r\n      })),\r\n    });\r\n  };\r\n  // const counttoggle = todos.filter((todo) => todo.done).length;\r\n\r\n  deleteTodo = (id) => {\r\n    // const todos = this.state.todos.filter((todo) => {\r\n    //   return todo.id !== id;\r\n    // });\r\n    this.setState({\r\n      todos: this.state.todos.filter((todo) => todo.id !== id),\r\n    });\r\n  };\r\n\r\n  updateStatus = (status) => {\r\n    this.setState({\r\n      status: status,\r\n    });\r\n  };\r\n\r\n  // footerAll = () => {\r\n  //   this.setState({\r\n  //     status: \"ALL\",\r\n  //   });\r\n  // };\r\n\r\n  // footerActive = () => {\r\n  //   this.setState({\r\n  //     status: \"ACTIVE\",\r\n  //   });\r\n  // };\r\n\r\n  // footerCompleted = () => {\r\n  //   this.setState({\r\n  //     status: \"COMPLETED\",\r\n  //   });\r\n  // };\r\n\r\n  clearCompleted = () => {\r\n    // const todos = this.state.todos.filter((todo) => {\r\n    //   return todo.done !== true;\r\n    // });\r\n    this.setState({\r\n      todos: this.state.todos.filter((todo) => todo.done !== true),\r\n    });\r\n  };\r\n\r\n  render() {\r\n    let newtodos = this.state.todos;\r\n    if (this.state.status === \"ACTIVE\") {\r\n      newtodos = this.state.todos.filter((todo) => {\r\n        return todo.done === false;\r\n      });\r\n    } else if (this.state.status === \"COMPLETED\") {\r\n      newtodos = this.state.todos.filter((todo) => {\r\n        return todo.done === true;\r\n      });\r\n    }\r\n\r\n    return (\r\n      <div className=\"todo\">\r\n        <h1 className=\"title\">Todos</h1>\r\n        <TodoHeader\r\n          todo={this.state.todos}\r\n          addTodo={this.addTodo}\r\n          toggleAll={this.toggleAll}\r\n        />\r\n        <TodoList\r\n          todos={newtodos}\r\n          deleteTodo={this.deleteTodo}\r\n          toggleTodo={this.toggleTodo}\r\n          editTodo={this.editTodo}\r\n        />\r\n        <TodoFooter\r\n          todos={this.state.todos}\r\n          updateStatus={this.updateStatus}\r\n          // footerAll={this.footerAll}\r\n          // footerActive={this.footerActive}\r\n          // footerCompleted={this.footerCompleted}\r\n          clearCompleted={this.clearCompleted}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}